<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright (c) 2017 The Etnaviv Project

 Permission is hereby granted, free of charge, to any person obtaining a
 copy of this software and associated documentation files (the "Software"),
 to deal in the Software without restriction, including without limitation
 the rights to use, copy, modify, merge, publish, distribute, sub license,
 and/or sell copies of the Software, and to permit persons to whom the
 Software is furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice (including the
 next paragraph) shall be included in all copies or substantial portions
 of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
 THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 DEALINGS IN THE SOFTWARE.
-->
<database xmlns="http://nouveau.freedesktop.org/"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://nouveau.freedesktop.org/ rules-ng.xsd">

<import file="copyright.xml"/>

<!-- Vivante GCxxxx render states and registers overview:
     BLT engine state. Based on reverse engineering, guesswork and experimentation.
  -->
<domain name="VIVS" brief="GPU state">

    <enum name="BLT_TILING">
        <value value="0" name="LINEAR"/>
        <!-- Curiously, there seems to be no difference between SUPER_TILED and TILED
             on this hardware (GC7000). I think the only difference are alignment/stride
             constraints.
         -->
        <value value="3" name="SUPER_TILED"/>
    </enum>
    <enum name="BLT_FORMAT">
	<!-- Yet another format enumeration, on first sight it looks like the
             PE/RS formats but I don't think it's the same - for example R8G8 differs
          -->
        <value value="0x01" name="A4R4G4B4"/>
        <value value="0x05" name="X8R8G8B8"/>
        <value value="0x06" name="A8R8G8B8"/>
        <value value="0x1c" name="A16R16G16B16"/>
        <value value="0x22" name="R8G8B8"/> <!-- now that's old-school -->
        <value value="0x23" name="R8"/>
        <value value="0x24" name="R8G8"/>
    </enum>

    <bitset name="BLT_IMAGE_CONFIG">
        <bitfield pos="0" name="TS"/> <!-- enable tile status -->
        <bitfield pos="1" name="COMPRESSION"/> <!-- off when VIV_DISABLE_DEC400 -->
        <bitfield high="7" low="4" name="COMPRESSION_FORMAT" type="COLOR_COMPRESSION_FORMAT"/>
        <bitfield pos="8" name="UNK8"/> <!-- affects coloring, possibly SRGB -->
        <!-- Not sure why there's another set of what looks like swizzles here.
             Setting them doesn't seem to have any effect on at least COPY_IMAGE.
         -->
        <bitfield high="10" low="9" name="SWIZ_R" type="TEXTURE_SWIZZLE"/>
        <bitfield high="12" low="11" name="SWIZ_G" type="TEXTURE_SWIZZLE"/>
        <bitfield high="14" low="13" name="SWIZ_B" type="TEXTURE_SWIZZLE"/>
        <bitfield high="16" low="15" name="SWIZ_A" type="TEXTURE_SWIZZLE"/>
        <bitfield pos="17" name="CACHE_MODE" type="TS_CACHE_MODE"/>
        <bitfield pos="19" name="FLIP_Y"/> <!-- only works on DEST -->
        <bitfield pos="21" name="FROM_SUPER_TILED"/>
        <bitfield pos="22" name="UNK22"/> <!-- also affects tiling - set on IMAGE_COPY on DEST -->
        <bitfield pos="26" name="TO_SUPER_TILED"/>
    </bitset>

    <stripe name="BLT" brief="Blit engine"> <!-- BLT_ENGINE -->
        <doc>
            Blit engine (also "resolve v2") states.

            BLT operations:
            - Fill/Clear image (glClear)
            - Copy image (texture uploading, framebuffer blit)
            - Copy buffer (glBuffer(Sub)Data)
            - In-place resolve
            - Compute mipmaps (glGenerateMipmap)
            - YUV tiling, convert various planar YUV formats to tiled YUV for
              texturing (glTexDirectVIV)

            Note: It looks like no assumption can be made that any of this
            state is retained between operations. All relevant state must be
            programmed every time.
        </doc>
        <reg32 offset="0x14000" name="SRC_ADDR" type="VIVM">
            <doc>
                SRC_ADDR is used for COPY_IMAGE, CLEAR_IMAGE, COPY_BUFFER,
                GEN_MIPMAPS operations (YUV_TILE has its own source address
                register).
                For COPY_BUFFER there appear to be no alignment requirements.
            </doc>
        </reg32>
        <reg32 offset="0x14008" name="SRC_STRIDE">
            <bitfield high="19" low="0" name="STRIDE"/>
            <bitfield high="28" low="21" name="FORMAT" type="BLT_FORMAT"/>
            <bitfield high="30" low="29" name="TILING" type="BLT_TILING"/>
        </reg32>
        <reg32 offset="0x1400C" name="SRC_CONFIG" type="BLT_IMAGE_CONFIG"/>
        <reg32 offset="0x14010" name="SRC_TS" type="VIVM"/>
        <reg32 offset="0x14014" name="SRC_POS">
            <!-- In pixels, does not need to be tile-aligned. -->
            <bitfield high="15" low="0" name="X" type="uint"/>
            <bitfield high="31" low="16" name="Y" type="uint"/>
        </reg32>
        <reg32 offset="0x14018" name="DEST_ADDR" type="VIVM">
            <doc>
                DEST_ADDR is used for COPY_IMAGE, CLEAR_IMAGE and COPY_BUFFER operations.
                (YUV_TILE and GEN_MIPMAPS have their own desination address registers)
                For COPY_BUFFER there appear to be no alignment requirements.
            </doc>
        </reg32>
        <!-- Destination TS appears to only be used for clears.
             Image copies do not appear to use any destination TS.
             The blob driver does a copy-to-itself before copying to an image with TS.
         -->
        <reg32 offset="0x14020" name="DEST_TS" type="VIVM"/>
        <reg32 offset="0x14024" name="DEST_STRIDE">
            <bitfield high="19" low="0" name="STRIDE"/>
            <bitfield high="28" low="21" name="FORMAT" type="BLT_FORMAT"/>
            <bitfield high="30" low="29" name="TILING" type="BLT_TILING"/>
        </reg32>
        <reg32 offset="0x14028" name="DEST_CONFIG" type="BLT_IMAGE_CONFIG"/>
        <reg32 offset="0x1402C" name="DEST_POS"> <!-- used with COPY_IMAGE and CLEAR_IMAGE -->
            <!-- In pixels, does not need to be tile-aligned. -->
            <bitfield high="15" low="0" name="X" type="uint"/>
            <bitfield high="31" low="16" name="Y" type="uint"/>
        </reg32>
        <reg32 offset="0x14030" name="IMAGE_SIZE"> <!-- used with COPY_IMAGE and CLEAR_IMAGE -->
            <bitfield high="15" low="0" name="WIDTH" type="uint"/>
            <bitfield high="31" low="16" name="HEIGHT" type="uint"/>
        </reg32>
        <reg32 offset="0x14034" name="SRC_TS_CLEAR_VALUE0"/>
        <reg32 offset="0x14038" name="SRC_TS_CLEAR_VALUE1"/>
        <reg32 offset="0x1403C" name="DEST_TS_CLEAR_VALUE0"/> <!-- used with CLEAR_IMAGE -->
        <reg32 offset="0x14040" name="DEST_TS_CLEAR_VALUE1"/> <!-- used with CLEAR_IMAGE -->
        <reg32 offset="0x14044" name="CLEAR_COLOR0"/> <!-- used with CLEAR_IMAGE -->
        <reg32 offset="0x14048" name="CLEAR_COLOR1"/> <!-- used with CLEAR_IMAGE -->

        <!-- The following influence which bits are cleared of the target:
             Clear depth and stencil: 0xffffffff
             Clear just depth: 0xffffff00
         -->
        <reg32 offset="0x1404C" name="CLEAR_BITS0"/> <!-- used with CLEAR_IMAGE -->
        <reg32 offset="0x14050" name="CLEAR_BITS1"/> <!-- used with CLEAR_IMAGE -->

        <reg32 offset="0x14054" name="BUFFER_SIZE"/> <!-- used with COPY_BUFFER -->

        <!-- Same as 1404C and 14050 but for COPY_IMAGE? -->
        <reg32 offset="0x14058" name="UNK14058"/> <!-- used with COPY_IMAGE -->
        <reg32 offset="0x1405C" name="UNK1405C"/> <!-- used with COPY_IMAGE -->

        <reg32 offset="0x14060" name="COMMAND">
            <bitfield high="3" low="0" name="COMMAND">
                <value value="1" name="CLEAR_IMAGE"/>
                <value value="2" name="COPY_IMAGE"/>
                <value value="3" name="COPY_BUFFER"/>
                <value value="4" name="INPLACE"/>
                <value value="5" name="YUV_TILE"/> <!-- Used for glTexDirectVIV -->
                <value value="6" name="GEN_MIPMAPS"/>
            </bitfield>
        </reg32>
        <reg32 offset="0x14064" name="CONFIG">
            <bitfield high="2" low="1" name="SRC_ENDIAN" type="ENDIAN_MODE"/>
            <bitfield high="4" low="3" name="DEST_ENDIAN" type="ENDIAN_MODE"/>
            <bitfield pos="5" name="UNK5"/> <!-- messes up tiling -->
            <bitfield pos="6" name="UNK6"/> <!-- messes up tiling too -->
            <bitfield high="9" low="7" name="CLEAR_BPP"/> <!-- bytes per pixel-1, on CLEAR -->
            <bitfield pos="10" name="INPLACE_CACHE_MODE" type="TS_CACHE_MODE"/>
            <bitfield pos="11" name="INPLACE_BOTH" brief="Use both dest TS clear values, interleaved"/>
            <bitfield high="17" low="15" name="INPLACE_BPP">
                <value value="0" name="1"/>
                <value value="1" name="2"/>
                <value value="2" name="4"/>
                <value value="3" name="8"/>
                <value value="4" name="16"/>
            </bitfield>
        </reg32>
        <reg32 offset="0x14068" name="INPLACE_TILE_COUNT" brief="Tile count for INPLACE operation"/>

        <!-- The following are used with YUV tiling -->
        <stripe name="YUV">
            <reg32 offset="0x1406C" name="CONFIG">
                <doc>
                 0x001 YV12, I420
                 0x011 NV12
                 0x111 NV21
                </doc>
            </reg32>
            <reg32 offset="0x14070" name="UNK14070"/>
            <reg32 offset="0x14074" name="SRC_YADDR" type="VIVM"/>
            <reg32 offset="0x14078" name="SRC_YSTRIDE"/>
            <reg32 offset="0x1407C" name="SRC_UADDR" type="VIVM"/>
            <reg32 offset="0x14080" name="SRC_USTRIDE"/>
            <reg32 offset="0x14084" name="SRC_VADDR" type="VIVM"/>
            <reg32 offset="0x14088" name="SRC_VSTRIDE"/>
            <reg32 offset="0x1408C" name="DEST_ADDR" type="VIVM"/>
            <reg32 offset="0x14090" name="DEST_STRIDE"/>
        </stripe>

        <reg32 offset="0x1409C" name="UNK1409C"/>
        <reg32 offset="0x140A0" name="UNK140A0"/>
        <reg32 offset="0x140A4" name="FENCE_OUT_ADDRESS" type="VIVM"/>
        <reg32 offset="0x140A8" name="FENCE_OUT_DATA_LOW"/>
        <reg32 offset="0x140AC" name="SET_COMMAND"/> <!-- blob writes 3 here before and after setting COMMAND -->
        <reg32 offset="0x140B0" name="MIPMAP_CONFIG">
            <bitfield high="4" low="0" name="NUM">
                <doc>
                Total number of levels, so number of filled MIP slots plus one.
                Do not set this to 0 or 1, this will never finish and crash the GPU.
                </doc>
            </bitfield>
            <bitfield pos="5" name="UNK5"/> <!-- affects filtering, the blob always sets it -->
        </reg32>
        <reg32 offset="0x140B4" name="FENCE_OUT_DATA_HIGH"/>
        <reg32 offset="0x140B8" name="ENABLE">
            <bitfield pos="0" name="ENABLE" brief="Enable BLT engine">
                <doc>
                    It looks like it needs to be enabled during any use of the engine, and
                    disabled otherwise:
                    - This is set to 1 before usage of the BLT engine and programming the
                    registers, and set to 0 after programming the registers.
                    - It is also set to 1 before waiting on the BLT engine through a semaphore,
                    and reset afterwards.
                </doc>
            </bitfield>
        </reg32>
        <reg32 offset="0x140BC" name="SWIZZLE">
	    <bitfield high="2" low="0" name="SRC_R" type="TEXTURE_SWIZZLE"/>
	    <bitfield high="5" low="3" name="SRC_G" type="TEXTURE_SWIZZLE"/>
	    <bitfield high="8" low="6" name="SRC_B" type="TEXTURE_SWIZZLE"/>
	    <bitfield high="11" low="9" name="SRC_A" type="TEXTURE_SWIZZLE"/>
	    <bitfield high="14" low="12" name="DEST_R" type="TEXTURE_SWIZZLE"/>
	    <bitfield high="17" low="15" name="DEST_G" type="TEXTURE_SWIZZLE"/>
	    <bitfield high="20" low="18" name="DEST_B" type="TEXTURE_SWIZZLE"/>
	    <bitfield high="23" low="21" name="DEST_A" type="TEXTURE_SWIZZLE"/>
	</reg32>
        <!-- Multiple different color surfaces (+strides?) can be specified here.
             I suspect that this is used for mipmap generation.
         -->
        <stripe name="MIP" length="13" stride="4">
            <reg32 offset="0x140C0" name="ADDR" type="VIVM"/>
            <reg32 offset="0x14300" name="STRIDE"/>
        </stripe>
        <!-- These two, encountered while tracing SashaWillems "indirectdraw" Vulkan demo,
             immediately follow the MIP state for the 13 mipmaps.
             It appears to delimit the end (inclusive) of a memory range for SRC and DEST.
          -->
        <reg32 offset="0x140F4" name="SRC_END" type="VIVM"/>
        <reg32 offset="0x14334" name="DEST_END" type="VIVM"/>
    </stripe>

</domain>

</database>


